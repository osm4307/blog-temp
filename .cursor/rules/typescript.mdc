---
description: Defines rules for TypeScript projects including type definitions, type safety, component types, API types, and utility types.
globs: 
alwaysApply: false
---
## TypeScript 프로젝트 규칙

### 1. 타입 정의
- 모든 컴포넌트 props는 인터페이스로 정의
- API 응답 타입은 별도 파일로 관리
- 유틸리티 타입 적극 활용 (Pick, Omit, Partial 등)
- 제네릭 타입 활용하여 재사용성 높이기

### 2. 타입 안정성
- `strict: true` 설정 유지
- `noImplicitAny` 활성화
- `strictNullChecks` 활성화
- 타입 단언(as) 최소화

### 3. 컴포넌트 타입
```typescript
// 컴포넌트 Props 인터페이스 예시
interface ButtonProps {
  variant: 'primary' | 'secondary' | 'outline';
  size: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
  onClick?: () => void;
}
```

### 4. API 타입
```typescript
// API 응답 타입 예시
interface ApiResponse<T> {
  data: T;
  status: number;
  message: string;
}
```

### 5. 유틸리티 타입
- `Partial<T>`: 모든 속성을 선택적으로
- `Required<T>`: 모든 속성을 필수로
- `Pick<T, K>`: 특정 속성만 선택
- `Omit<T, K>`: 특정 속성 제외
- `Record<K, T>`: 키-값 타입 정의

