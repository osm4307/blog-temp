---
description: 
globs: 
alwaysApply: true
---
# 프로젝트 일반 규칙

## 1. 코딩 원칙

### SOLID 원칙 준수
- 단일 책임 원칙 (SRP): 각 클래스/컴포넌트는 하나의 책임만 가짐
- 개방-폐쇄 원칙 (OCP): 확장에는 열려있고 수정에는 닫혀있어야 함
- 리스코프 치환 원칙 (LSP): 하위 타입은 상위 타입을 대체할 수 있어야 함
- 인터페이스 분리 원칙 (ISP): 클라이언트는 사용하지 않는 인터페이스에 의존하지 않아야 함
- 의존성 역전 원칙 (DIP): 고수준 모듈은 저수준 모듈에 의존하지 않아야 함

### 코드 품질
- 모의 데이터는 테스트 환경에서만 사용
- 코드 중복을 피하고 재사용 가능한 컴포넌트/함수로 분리
- 명확하고 의미 있는 변수명과 함수명 사용
- 적절한 주석과 문서화
- 일관된 코드 스타일 유지

### 성능 최적화
- 불필요한 렌더링/연산 최소화
- 적절한 캐싱 전략 사용
- 번들 크기 최적화
- 지연 로딩 활용

## 2. 기술 스택 관리

### 스택 변경 규칙
- 기술 스택 변경은 명시적 승인 필요
- 변경 시 영향도 분석 문서 작성
- 마이그레이션 계획 수립
- 하위 호환성 보장

### 도구 관리
- 버전 관리 철저히 수행
- 의존성 정기적 업데이트
- 보안 취약점 주기적 점검
- 개발 도구 표준화

## 3. 워크플로우

### 테스트 전략
- 단위 테스트: 모든 핵심 기능
- 통합 테스트: 컴포넌트 간 상호작용
- E2E 테스트: 주요 사용자 시나리오
- 성능 테스트: 부하 및 스트레스 테스트
- 엣지 케이스 테스트: 예외 상황 처리

### 코드 리뷰
- PR 템플릿 사용
- 코드 스타일 가이드 준수
- 성능 영향 분석
- 보안 취약점 검토

### 버전 관리
- 의미 있는 커밋 메시지
- 브랜치 전략 준수
- 태그를 통한 버전 관리
- 변경 이력 문서화

## 4. 커뮤니케이션

### 프로젝트 관리
- 작업 진행 상황 추적

### 문서화
- API 문서
- 아키텍처 문서
- 사용자 가이드
- 개발자 가이드
- 변경 이력

### 위기 대응
- 긴급 상황 대응 프로세스
- 장애 보고 체계
- 백업 및 복구 계획
- 보안 사고 대응 계획

## 5. 품질 관리

### 코드 품질
- 정적 코드 분석
- 코드 복잡도 관리
- 테스트 커버리지 유지
- 성능 메트릭 모니터링

### 보안
- 정기적인 보안 감사
- 취약점 스캔
- 접근 권한 관리
- 데이터 암호화

### 모니터링
- 애플리케이션 성능 모니터링
- 에러 로깅 및 추적
- 사용자 행동 분석
- 시스템 리소스 모니터링

